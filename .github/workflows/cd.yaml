name: CD
on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  publish-feature:
    if: ${{ contains(github.event.release.tag_name, '-v') }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      id-token: write
      attestations: write

    steps:
      - name: Harden runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Determine feature directory
        id: feature
        run: |
          set -euo pipefail

          tag='${{ github.event.release.tag_name }}'
          feature="${tag%-v*}"
          version="${tag##*-v}"

          if [[ -z "${feature}" || "${feature}" == "${tag}" ]]; then
            echo "Failed to parse feature name from tag '${tag}'" >&2
            exit 1
          fi

          if [[ -z "${version}" || "${version}" == "${tag}" ]]; then
            echo "Failed to parse version from tag '${tag}'" >&2
            exit 1
          fi

          feature_dir="src/${feature}"

          if [[ ! -d "${feature_dir}" ]]; then
            echo "Expected feature directory '${feature_dir}' to exist" >&2
            exit 1
          fi

          if [[ ! -f "${feature_dir}/devcontainer-feature.json" ]]; then
            echo "Feature manifest '${feature_dir}/devcontainer-feature.json' is missing" >&2
            exit 1
          fi

          printf 'feature=%s\n' "${feature}" >> "${GITHUB_OUTPUT}"
          printf 'feature_dir=%s\n' "${feature_dir}" >> "${GITHUB_OUTPUT}"
          printf 'version=%s\n' "${version}" >> "${GITHUB_OUTPUT}"
          printf 'namespace=%s\n' "${GITHUB_REPOSITORY}" >> "${GITHUB_OUTPUT}"

      - name: Stage feature for publish
        id: stage
        run: |
          set -euo pipefail

          feature='${{ steps.feature.outputs.feature }}'
          feature_dir='${{ steps.feature.outputs.feature_dir }}'

          staging_dir="$(mktemp -d)"
          mkdir -p "${staging_dir}/${feature}"
          cp -R "${feature_dir}/." "${staging_dir}/${feature}/"

          printf 'base_path=%s\n' "${staging_dir}" >> "${GITHUB_OUTPUT}"

      - name: Publish Features
        uses: devcontainers/action@1082abd5d2bf3a11abccba70eef98df068277772 # v1.4.3
        with:
          publish-features: "true"
          base-path-to-features: ${{ steps.stage.outputs.base_path }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Install crane
        uses: ./.github/actions/setup-crane

      - name: Resolve digest for published Feature
        id: digest
        env:
          FEATURE_REF: ghcr.io/${{ github.repository }}/${{ steps.feature.outputs.feature }}:${{ steps.feature.outputs.version }}
        run: |
          set -euo pipefail

          feature_ref="${FEATURE_REF}"
          image_base="${feature_ref%%:*}"
          version_tag="${feature_ref##*:}"

          digest="$(crane digest "${image_base}:${version_tag}")"

          printf 'image_base=%s\n' "${image_base}" >> "$GITHUB_OUTPUT"
          printf 'version_tag=%s\n' "${version_tag}" >> "$GITHUB_OUTPUT"
          printf 'digest=%s\n' "${digest}" >> "$GITHUB_OUTPUT"

      - name: Attest feature provenance
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-name: ${{ steps.digest.outputs.image_base }}
          subject-digest: ${{ steps.digest.outputs.digest }}
          push-to-registry: true
